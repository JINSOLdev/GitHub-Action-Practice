// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  nickname     String
  image        String?
  password     String
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  products        Product[]
  articles        Article[]
  productComments ProductComment[]
  articleComments ArticleComment[]
  ProductLike     ProductLike[]
  ArticleLike     ArticleLike[]
  notify          Notify[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Int
  tags        String[]
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  comments    ProductComment[]
  ProductLike ProductLike[]
}

model Article {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  comments    ArticleComment[]
  ArticleLike ArticleLike[]
}

model ProductLike {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

model ArticleLike {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  article   Article  @relation(fields: [articleId], references: [id])
  articleId Int
  createdAt DateTime @default(now())

  @@unique([userId, articleId])
}

model ProductComment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model ArticleComment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

enum NotifyType {
  PRICE_CHANGE
  ARTICLE_COMMENT
  PRODUCT_COMMENT
}

model Notify {
  id        Int              @id @default(autoincrement())
  type      NotifyType
  title     String
  message   String?
  meta      Json?
  isRead    Boolean          @default(false)
  readAt    DateTime?
  createdAt DateTime         @default(now())

  user      User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  @@index([userId, isRead, createdAt])
}